# app.py ‚Äî Phelipe Online (corrigido)
import streamlit as st
import google.generativeai as genai
import os
import pandas as pd
import PyPDF2
import json
from datetime import datetime

# -----------------------------------------------------------------------------
# INICIALIZA√á√ÉO DO SESSION_STATE
# -----------------------------------------------------------------------------
st.session_state.setdefault("analise_feita", False)
st.session_state.setdefault("data", {})
st.session_state.setdefault("csv", None)
st.session_state.setdefault("csv_filename", "")
st.session_state.setdefault("classificacao_final", "N√£o classificado")

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DA P√ÅGINA
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Phelipe Online - TCE-MT", page_icon="üîç", layout="wide")
st.title("üîç Phelipe: Assistente de An√°lise de PPCIs do TCE-MT")

# -----------------------------------------------------------------------------
# CONFIGURA√á√ÉO DA API DO GEMINI
# -----------------------------------------------------------------------------
# Busca chave primeiro nos secrets do Streamlit e, se n√£o houver, em vari√°vel de ambiente.
api_key = st.secrets.get("GEMINI_API_KEY", os.getenv("GEMINI_API_KEY", "")).strip()

if not api_key:
    st.error("‚ö†Ô∏è Configure a vari√°vel GEMINI_API_KEY em Secrets ou vari√°vel de ambiente.")
    st.stop()

try:
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-1.5-pro")
except Exception:
    st.error("‚ö†Ô∏è Erro ao configurar a API do Gemini. Verifique a chave e tente novamente.")
    st.stop()

# -----------------------------------------------------------------------------
# PROMPT DO SISTEMA (AN√ÅLISE GERAL)
# -----------------------------------------------------------------------------
prompt_sistema = """
Voc√™ √© Phelipe, um agente especializado em an√°lise de recomenda√ß√£o do TCE-MT, com dupla expertise:
1) T√©cnico de controle externo (TCE-MT)
2) Especialista em controle interno da SES-MT

OBJETIVO PRINCIPAL:
Verificar se a a√ß√£o do gestor √© compat√≠vel com a recomenda√ß√£o, com base apenas nos documentos do processo.

ETAPAS DA AN√ÅLISE:

1. üìö AN√ÅLISE MULTIDOCUMENTAL (Contexto T√©cnico)
   - Relat√≥rio de Auditoria: falha constatada, contexto f√°tico, base legal, valor do dano
   - Parecer do MPC: posicionamento t√©cnico, concord√¢ncia ou ressalva
   - Decis√£o do TCE-MT: recomenda√ß√£o espec√≠fica, prazo, responsabilidades
   - Resposta do Gestor: a√ß√£o informada, prazo, evid√™ncia anexada

2. ‚è≥ RECONSTRU√á√ÉO DA CRONOLOGIA
   Ordene os eventos:
   - O que foi constatado?
   - Como o MPC opinou?
   - O que decidiram os conselheiros?
   - Qual foi a resposta do gestor?
   - H√° coer√™ncia entre a resposta e o problema?

3. üè• AN√ÅLISE CONTEXTUAL (SES-MT)
   Avalie a viabilidade pr√°tica da a√ß√£o, considerando:
   - Estrutura da SES-MT
   - Recursos humanos
   - Sistemas de informa√ß√£o

4. üß© MEM√ìRIA INSTITUCIONAL
   Ap√≥s a an√°lise, gere observa√ß√µes como:
   > üí¨ Phelipe lembra: Este tipo de irregularidade j√° ocorreu em 3 unidades nos √∫ltimos 18 meses.

SA√çDA:
Retorne apenas um JSON envolto em ```json ... ```, com:
{
  "relatorio_tecnico": "Texto completo com sum√°rio cronol√≥gico, cr√≠tica t√©cnica e conclus√£o.",
  "analise_contextual": "Avalia√ß√£o da viabilidade dentro da realidade operacional da SES-MT.",
  "insights_capacitacao": {
    "padroes_identificados": [],
    "sugestoes_prevencao": [],
    "modus_operandi": []
  },
  "indicios_dano_erario": {
    "consta": false,
    "descricao": "N√£o consta",
    "fundamentacao": "N√£o consta"
  },
  "observacoes_memoria": "..."
}

REGRAS ESTRITAS:
- Nunca invente, suponha ou estime dados.
- Se a informa√ß√£o n√£o estiver no documento, diga "N√£o consta".
- Sempre cite a fonte: "conforme mencionado na decis√£o", "segundo o PPCI".
- Use linguagem t√©cnica, clara e objetiva.
- Retorne apenas o JSON. Nada al√©m disso.
"""

# -----------------------------------------------------------------------------
# FUN√á√ÉO PARA EXTRA√á√ÉO DE TEXTO DE PDFs (sem OCR)
# -----------------------------------------------------------------------------
def extrair_texto_pdf(upload_files):
    documentos_texto = ""
    for file in upload_files:
        file.seek(0)
        try:
            pdf_reader = PyPDF2.PdfReader(file)
            for i, page in enumerate(pdf_reader.pages):
                try:
                    text = page.extract_text()
                except Exception:
                    text = None
                if text and text.strip():
                    documentos_texto += f"[{getattr(file, 'name', 'documento.pdf')} - P√°gina {i + 1}]\n{text}\n\n"
                else:
                    documentos_texto += f"[{getattr(file, 'name', 'documento.pdf')} - P√°gina {i + 1}]\n[Texto n√£o extra√≠do - PDF possivelmente escaneado]\n\n"
        except Exception as e:
            documentos_texto += f"[Erro ao ler {getattr(file, 'name', 'desconhecido')}: {str(e)}]\n"
    return documentos_texto or "Nenhum texto extra√≠do."

# -----------------------------------------------------------------------------
# INTERFACE ‚Äî DADOS DE ENTRADA
# -----------------------------------------------------------------------------
st.subheader("üì• Documentos do Processo")
upload_files = st.file_uploader("Envie todos os documentos (PDFs)", type=["pdf"], accept_multiple_files=True)

st.subheader("üìù Dados da Decis√£o (v√°lidos para todas as recomenda√ß√µes)")
num_decisao = st.text_input("üî¢ N√∫mero da Decis√£o (ex.: Ac√≥rd√£o 1234/2025)")
data_decisao = st.text_input("üìÖ Data da Decis√£o (ex.: 15/05/2025)")
num_processo_tce = st.text_input("üìã N√∫mero do Processo no TCE")
orgao_decisao = st.text_input("üèõÔ∏è √ìrg√£o que emitiu a decis√£o", value="TCE-MT")

st.subheader("üìå An√°lise da Recomenda√ß√£o")
servidor_uniseci = st.text_input("üßë‚Äçüíº Servidor da UnISECI/SES-MT")
data_analise = datetime.now().strftime("%d/%m/%Y")
num_ppci = st.text_input("üìÑ N√∫mero do PPCI")
num_recomendacao = st.text_input("üîñ N√∫mero da Recomenda√ß√£o")
cod_responsavel = st.text_input("üîê C√≥digo do Respons√°vel ou Procedimento")
gestor = st.text_input("üë®‚Äçüíº Gestor (nome)")

recomendacao = st.text_area("üìå Recomenda√ß√£o", height=150)

status_acao = st.selectbox(
    "üîß Status da A√ß√£o apresentada pelo Gestor",
    ["selecione...", "Implementada", "Em Implementa√ß√£o"],
    help="Status informado pelo gestor: se a a√ß√£o j√° foi realizada ou est√° em andamento/planejada."
)

data_implementacao_gestor = st.text_input(
    "üìÖ Data informada pelo gestor (de implementa√ß√£o ou previs√£o)",
    help="Ex.: 15/03/2025 (para 'Em Implementa√ß√£o') ou 10/02/2025 (para 'Implementada')"
)

acao_gestor = st.text_area("üìù A√ß√£o do Gestor", height=150)

# -----------------------------------------------------------------------------
# A√á√ÉO: ANALISAR COM PHELIPE
# -----------------------------------------------------------------------------
botao_analisar = st.button("üöÄ Analisar com Phelipe")

if botao_analisar and upload_files and num_decisao.strip() and status_acao != "selecione...":
    with st.spinner("Phelipe est√° analisando... ‚è≥"):
        try:
            # 1) Extrai texto dos PDFs
            documentos_texto = extrair_texto_pdf(upload_files)

            # 2) Monta prompt completo
            prompt_completo = f"{prompt_sistema}\n\n=== DOCUMENTOS DO PROCESSO ===\n{documentos_texto}"

            # 3) Chama o modelo
            response = model.generate_content(prompt_completo)
            output = (response.text or "").strip()

            # 4) Extrai JSON da resposta
            json_str = None
            if "```json" in output:
                json_start = output.find("```json") + 7
                json_end = output.find("```", json_start)
                if json_end != -1:
                    json_str = output[json_start:json_end].strip()
            elif output.startswith("{") and output.endswith("}"):
                json_str = output

            if json_str:
                try:
                    data_saida = json.loads(json_str)
                except json.JSONDecodeError:
                    data_saida = {"relatorio_tecnico": "Erro: JSON inv√°lido retornado pelo modelo."}
            else:
                data_saida = {"relatorio_tecnico": "Erro: N√£o foi poss√≠vel extrair o JSON da resposta do Gemini."}

            # Salva no session_state
            st.session_state.data = data_saida
            st.session_state.analise_feita = True

            # 5) Gera CSV em mem√≥ria (robusto a chaves variantes)
            ind_erario = data_saida.get("indicios_dano_erario", {})
            # Aceita varia√ß√µes: "consta", "consta_dano", "consta_rano"
            consta_dano = bool(
                ind_erario.get("consta") or
                ind_erario.get("consta_dano") or
                ind_erario.get("consta_rano")
            )

            insights = data_saida.get("insights_capacitacao", {})
            sugestoes_prev = insights.get("sugestoes_prevencao", [])
            if not isinstance(sugestoes_prev, list):
                sugestoes_prev = [str(sugestoes_prev)]

            df = pd.DataFrame([{
                "data_analise": data_analise,
                "servidor_uniseci": servidor_uniseci,
                "num_decisao": num_decisao,
                "data_decisao": data_decisao,
                "num_processo_tce": num_processo_tce,
                "num_ppci": num_ppci,
                "num_recomendacao": num_recomendacao,
                "cod_responsavel": cod_responsavel,
                "orgao_decisao": orgao_decisao,
                "gestor": gestor,
                "recomendacao": (recomendacao or "")[:200],
                "acao_gestor": (acao_gestor or "")[:200],
                "status_acao": status_acao,
                "data_implementacao_gestor": data_implementacao_gestor,
                "relatorio_tecnico": data_saida.get("relatorio_tecnico", "N√£o dispon√≠vel"),
                "analise_contextual": data_saida.get("analise_contextual", "N√£o dispon√≠vel"),
                "classificacao_final": st.session_state.classificacao_final,
                "insights_prevencao": ", ".join([str(x) for x in sugestoes_prev]) if sugestoes_prev else "Nenhuma",
                "indicio_dano": "Sim" if consta_dano else "N√£o",
                "detalhe_dano": ind_erario.get("descricao", "N√£o consta"),
                "observacoes_memoria": data_saida.get("observacoes_memoria", "Nenhuma")
            }])

            csv = df.to_csv(index=False, encoding="utf-8-sig")
            st.session_state.csv = csv
            st.session_state.csv_filename = f"phelipe_{num_decisao.replace('/', '-').replace(' ', '_')}.csv"

        except Exception as e:
            st.error(f"‚ùå Erro durante a an√°lise: {e}")

# -----------------------------------------------------------------------------
# EXIBI√á√ÉO DOS RESULTADOS
# -----------------------------------------------------------------------------
if st.session_state.analise_feita:
    saida = st.session_state.data

    st.subheader("üìÑ Relat√≥rio T√©cnico")
    st.write(saida.get("relatorio_tecnico", "N√£o dispon√≠vel"))

    st.subheader("üè• An√°lise Contextual (SES-MT)")
    st.write(saida.get("analise_contextual", "N√£o dispon√≠vel"))

    # ------------------- An√°lise da A√ß√£o do Gestor (prompt isolado) -------------------
    st.subheader("üìù An√°lise da A√ß√£o do Gestor")

    try:
        prompt_analise_acao = f"""
Voc√™ √© Phelipe, especialista t√©cnico em controle interno, controle externo, SES/MT, integridade e normas aplic√°veis.
Sua tarefa √© avaliar diretamente se a a√ß√£o do gestor cumpre a recomenda√ß√£o, com base apenas nos documentos.

### RECOMENDA√á√ÉO:
{recomendacao}

### A√á√ÉO DO GESTOR:
{acao_gestor}

### STATUS DA A√á√ÉO:
{status_acao}

### INSTRU√á√ïES:
1. Compare diretamente a a√ß√£o com a recomenda√ß√£o.
2. Se o status for "Implementada":
   - Verifique se h√° evid√™ncia documental da execu√ß√£o.
   - Avalie se a a√ß√£o realmente implementou a recomenda√ß√£o.
3. Se o status for "Em Implementa√ß√£o":
   - Avalie o potencial de efic√°cia: a a√ß√£o corrige a causa raiz?
   - Verifique se o prazo informado √© coerente e fact√≠vel.
4. Classifique com base nisso:
   - ‚úÖ Compat√≠vel: a√ß√£o completa e comprovada (ou plano vi√°vel)
   - ‚ö†Ô∏è Parcialmente compat√≠vel: a√ß√£o incompleta, sem evid√™ncia ou com risco alto
   - ‚ùå Incompat√≠vel: a√ß√£o irrelevante, contradiz a recomenda√ß√£o ou n√£o corrige o problema
   - üö´ N√£o Aplic√°vel: justifique
5. Retorne apenas um texto claro, t√©cnico e objetivo, com at√© 150 palavras.
6. Nunca invente dados. Se n√£o constar, diga "N√£o consta no documento".
"""
        resp = model.generate_content(prompt_analise_acao)
        analise_acao = (resp.text or "").strip()
        st.write(analise_acao)

        # Atualiza a classifica√ß√£o final no session_state (tolerante a varia√ß√µes)
        texto = analise_acao.lower()
        if "‚úÖ compat√≠vel".lower() in texto or "compativel" in texto:
            st.session_state.classificacao_final = "‚úÖ Compat√≠vel"
        elif "‚ö†Ô∏è parcialmente".lower() in texto or "parcialmente" in texto:
            st.session_state.classificacao_final = "‚ö†Ô∏è Parcialmente compat√≠vel"
        elif "‚ùå incompat√≠vel".lower() in texto or "incompativel" in texto:
            st.session_state.classificacao_final = "‚ùå Incompat√≠vel"
        elif "üö´ n√£o aplic√°vel".lower() in texto or "nao aplicavel" in texto:
            st.session_state.classificacao_final = "üö´ N√£o Aplic√°vel"
        else:
            st.session_state.classificacao_final = "N√£o classificado"

    except Exception as e:
        st.error(f"Erro ao gerar an√°lise da a√ß√£o: {e}")

    # ------------------- Classifica√ß√£o Final -------------------
    st.subheader("üìä Classifica√ß√£o Final")
    st.markdown(f"**{st.session_state.classificacao_final}**")

    # ------------------- Insights para Capacita√ß√£o -------------------
    st.subheader("üéì Insights para Capacita√ß√£o")
    insights = saida.get("insights_capacitacao", {}) or {}
    st.write("**Padr√µes identificados:**")
    for p in insights.get("padroes_identificados", []) or []:
        st.write(f"‚Ä¢ {p}")
    st.write("**Sugest√µes de preven√ß√£o:**")
    for s in insights.get("sugestoes_prevencao", []) or []:
        st.write(f"‚Ä¢ {s}")
    st.write("**Modus Operandi (se houver ind√≠cio de m√°-f√©):**")
    for m in insights.get("modus_operandi", []) or []:
        st.write(f"‚Ä¢ {m}")

    # ------------------- Ind√≠cios de Dano ao Er√°rio -------------------
    st.subheader("‚ö†Ô∏è Ind√≠cios de Dano ao Er√°rio")
    dano = saida.get("indicios_dano_erario", {}) or {}
    consta_dano_final = bool(dano.get("consta") or dano.get("consta_dano") or dano.get("consta_rano"))
    if consta_dano_final:
        st.markdown("**‚úÖ H√° ind√≠cio de dano ao er√°rio**")
        st.write(dano.get("descricao", "N√£o especificado"))
        st.caption(f"Fonte: {dano.get('fundamentacao', 'N√£o consta')}")
    else:
        st.markdown("**‚ùå N√£o h√° men√ß√£o a dano ao er√°rio**")
        st.caption(dano.get("descricao", "N√£o consta"))

    # ------------------- Observa√ß√µes de Mem√≥ria -------------------
    st.subheader("üß† Observa√ß√µes Contextuais (Mem√≥ria Institucional)")
    obs = saida.get("observacoes_memoria", "Nenhuma observa√ß√£o registrada.")
    st.write(obs)

    # ------------------- Download do CSV -------------------
    if st.session_state.csv:
        st.download_button(
            "‚¨áÔ∏è Baixar CSV (completo)",
            data=st.session_state.csv,
            file_name=st.session_state.csv_filename,
            mime="text/csv"
        )

# -----------------------------------------------------------------------------
# PERGUNTE AO PHELIPE (busca simples na mem√≥ria CSV local)
# -----------------------------------------------------------------------------
st.subheader("üí¨ Pergunte ao Phelipe")
pergunte = st.text_input("Ex.: Quem s√£o os auditores? J√° houve isso em Rondon√≥polis?")

if pergunte:
    with st.spinner("Buscando no hist√≥rico..."):
        try:
            contexto = ""
            try:
                # Evite acentos em nomes de pastas/arquivos no container
                df_hist = pd.read_csv("memoria/historico.csv", encoding="utf-8")
                candidatos = df_hist[
                    df_hist.get("num_decisao", pd.Series(dtype=str)).astype(str).str.contains(pergunte, case=False, na=False) |
                    df_hist.get("recomendacao", pd.Series(dtype=str)).astype(str).str.contains(pergunte, case=False, na=False) |
                    df_hist.get("gestor", pd.Series(dtype=str)).astype(str).str.contains(pergunte, case=False, na=False)
                ]
                if not candidatos.empty:
                    contexto += "üìå Casos semelhantes encontrados:\n"
                    for _, row in candidatos.head(10).iterrows():
                        rec = str(row.get("recomendacao", ""))[:100]
                        nd = str(row.get("num_decisao", ""))
                        contexto += f"- {nd}: {rec}...\n"
            except Exception:
                contexto += "‚ö†Ô∏è Erro ao carregar hist√≥rico.\n"

            if contexto.strip():
                prompt_busca = f"""
Com base no contexto abaixo, responda √† pergunta com rigor t√©cnico.
Se a informa√ß√£o n√£o estiver no documento, diga "N√£o consta".

Pergunta: {pergunte}
Contexto: {contexto}
"""
                resposta_busca = model.generate_content(prompt_busca)
                st.write((resposta_busca.text or "").strip())
            else:
                st.info("üîç Nenhum dado encontrado para responder.")

        except Exception as e:
            st.error(f"Erro na busca: {e}")
